name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Log in to DigitalOcean Container Registry
        run: |
          echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login -u "doctl" --password-stdin ${{ secrets.REGISTRY_URL }}

      - name: Set Environment Variables
        run: |
          echo "DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN_DEV }}" >> $GITHUB_ENV
          echo "APPLICATION_ID=${{ secrets.APPLICATION_ID_DEV }}" >> $GITHUB_ENV
          echo "TAG=dev" >> $GITHUB_ENV

      - name: Display Environment Variables (for debugging)
        run: |
          echo "Using TAG=${{ env.TAG }}"
          echo "Using DISCORD_BOT_TOKEN=******"  # 보안을 위해 숨김 처리
          echo "Using APPLICATION_ID=${{ env.APPLICATION_ID }}"

      - name: Build Docker image
        run: |
          docker build \
          --build-arg DISCORD_BOT_TOKEN=${{ env.DISCORD_BOT_TOKEN }} \
          --build-arg APPLICATION_ID=${{ env.APPLICATION_ID }} \
          -t ${{ secrets.REGISTRY_URL }}/unwritten-bot:${{ env.TAG }} .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.REGISTRY_URL }}/unwritten-bot:${{ env.TAG }}

      - name: Logout from Registry
        run: docker logout ${{ secrets.REGISTRY_URL }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push # build-and-push 작업이 완료된 후 실행

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Setup SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key.pem
          chmod 600 deploy_key.pem

      - name: Set Environment Variables for Deployment
        run: |
          echo "TAG=dev" >> $GITHUB_ENV

      - name: Set Deployment Environment Variables
        run: |
          echo "TAG=${{ env.TAG }}"
          echo "TAG=${{ env.TAG }}" >> $GITHUB_ENV

      - name: Deploy to server
        run: |
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << EOF
          echo "Pulling latest image..."
          echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login -u "doctl" --password-stdin ${{ secrets.REGISTRY_URL }}
          docker stop unwritten-bot-${{ env.TAG }} || true
          docker rm unwritten-bot-${{ env.TAG }} || true
          docker rmi ${{ secrets.REGISTRY_URL }}/unwritten-bot:${{ env.TAG }}
          docker pull ${{ secrets.REGISTRY_URL }}/unwritten-bot:${{ env.TAG }}

          echo "Restarting container..."
          export DISCORD_BOT_TOKEN="${{ secrets.DISCORD_BOT_TOKEN_DEV }}"
          export APPLICATION_ID="${{ secrets.APPLICATION_ID_DEV }}"
          docker run -d --name unwritten-bot-${{ env.TAG }} \
            -e DISCORD_BOT_TOKEN=\$DISCORD_BOT_TOKEN \
            -e APPLICATION_ID=\$APPLICATION_ID \
            ${{ secrets.REGISTRY_URL }}/unwritten-bot:${{ env.TAG }}
          
          docker network connect unwritten_network unwritten-bot-${{ env.TAG }}
          echo "Done!"
          EOF

      - name: Cleanup SSH key
        run: rm -f deploy_key.pem
